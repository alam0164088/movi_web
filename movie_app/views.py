from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login as auth_login, logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from .forms import CustomLoginForm
from .models import Movie, Review, Genre
from django.core.paginator import Paginator
from django.db.models import Avg
from django.http import JsonResponse
import requests



def movie_list(request):
    movies = Movie.objects.all()
    genres = Genre.objects.all()
    query = request.GET.get('q')
    if query:
        movies = movies.filter(title__icontains=query) | movies.filter(description__icontains=query)
    genre_id = request.GET.get('genre')
    if genre_id:
        movies = movies.filter(genres__id=genre_id)
    paginator = Paginator(movies, 8)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'movie_app/movie_list.html', {
        'movies': page_obj,
        'genres': genres,
        'query': query,
        'selected_genre': genre_id,
        'page_obj': page_obj
    })

def movie_detail(request, movie_id):
    movie = get_object_or_404(Movie, id=movie_id)
    return render(request, 'movie_app/movie_detail.html', {'movie': movie})

def add_review(request, movie_id):
    movie = get_object_or_404(Movie, id=movie_id)
    if request.method == "POST":
        comment = request.POST.get('comment')
        rating = request.POST.get('rating')
        if comment and rating:
            Review.objects.create(movie=movie, user=request.user, comment=comment, rating=float(rating))
            return redirect('movie_detail', movie_id=movie.id)
    return render(request, 'movie_app/add_review.html', {'movie': movie})

@login_required
def add_to_favorite(request, movie_id):
    movie = get_object_or_404(Movie, id=movie_id)
    if request.user.is_authenticated:
        movie.favorites.add(request.user)
    return redirect('movie_detail', movie_id=movie.id)

@login_required
def remove_favorite(request, movie_id):
    movie = get_object_or_404(Movie, id=movie_id)
    if request.user.is_authenticated:
        movie.favorites.remove(request.user)
    return redirect('movie_detail', movie_id=movie.id)

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            auth_login(request, user)
            return redirect('movie_list')
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})

def custom_login(request):
    if request.method == 'POST':
        form = CustomLoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            auth_login(request, user)
            return redirect('movie_list')
    else:
        form = CustomLoginForm()
    return render(request, 'registration/login.html', {'form': form})

@login_required
def custom_logout(request):
    if request.method == 'POST':
        auth_logout(request)
        return redirect('movie_list')
    return render(request, 'registration/logout.html')

def trending(request):
    movies = Movie.objects.annotate(avg_rating=Avg('reviews__rating')).order_by('-avg_rating')[:8]
    return render(request, 'movie_app/trending.html', {'movies': movies})

def calendar(request):
    movies_list = Movie.objects.order_by('release_year')
    paginator = Paginator(movies_list, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'movie_app/calendar.html', {
        'movies': page_obj,
        'page_obj': page_obj
    })


def chatbot(request):
    if request.method == "POST":
        message = request.POST.get('message', '').lower().strip()
        api_key = '2503232ad80d9e99f4e88d075d6ea8d8'  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßÄ

        # ‚úÖ ‡¶∂‡ßÅ‡¶≠‡ßá‡¶ö‡ßç‡¶õ‡¶æ ‡¶¨‡¶ø‡¶®‡¶ø‡¶Æ‡¶Ø‡¶º
        if any(word in message for word in ["‡¶π‡¶æ‡¶á", "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã", "‡¶∏‡ßÅ‡¶™‡ßç‡¶∞‡¶≠‡¶æ‡¶§", "‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ", "‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßã", "‡¶ï‡¶ø ‡¶ñ‡¶¨‡¶∞"]):
            greetings_responses = [
                "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! üòä ‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶¨‡¶ü‡•§ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
                "‡¶∏‡ßÅ‡¶™‡ßç‡¶∞‡¶≠‡¶æ‡¶§! ‡¶Ü‡¶ú ‡¶ï‡ßã‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶ñ‡¶¨‡¶∞ ‡¶ö‡¶æ‡¶ì?",
                "‡¶π‡¶æ‡¶á! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø, ‡¶¨‡¶≤‡ßã ‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶ì‡•§",
                "‡¶ï‡¶ø ‡¶ñ‡¶¨‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ? ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßã?"
            ]
            import random
            return JsonResponse({'response': random.choice(greetings_responses)})

        # ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®
        if "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ" in message:
            return JsonResponse({'response': "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ '‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶¨‡¶ü'‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶ì?"})
        
        if "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú" in message or "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã" in message:
            return JsonResponse({'response': "‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç, ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü, ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â, ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶Æ‡ßÅ‡¶≠‡¶ø, ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡¶ì ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ‡•§ ‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßã!"})
        
        if "‡¶ï‡ßá ‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá" in message or "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡ßá ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßá" in message:
            return JsonResponse({'response': "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá ‡¶®‡¶æ‡¶ú‡¶Æ‡ßÅ‡¶≤ ‡¶≠‡¶æ‡¶á! ‡¶â‡¶®‡¶ø Django ‡¶¶‡¶ø‡ßü‡ßá ‡¶¨‡¶æ‡¶®‡¶æ‡¶á‡¶õ‡ßá‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá‡•§ üòÑ"})
        
        if "‡¶π‡ßá‡¶≤‡ßç‡¶™" in message or "help" in message:
            return JsonResponse({'response': "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã:\n- '‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶Æ‡ßÅ‡¶≠‡¶ø'\n- '2023 ‡¶è‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø'\n- 'Inception ‡¶è‡¶∞ ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç'\n- 'Avengers ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü'\n- 'The Batman ‡¶è‡¶∞ ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â'\n- '‡¶ï‡¶Æ‡ßá‡¶°‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø' ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø‡•§"})
        
        if "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶" in message or "thanks" in message:
            return JsonResponse({'response': "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶∞‡¶ì ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶ì?"})
        
        if "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°" in message:
            return JsonResponse({'response': "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø ‡¶®‡¶æ‡•§ ‡¶§‡¶¨‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç, ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶¨‡¶æ ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã!"})
        
        if "movie bot" in message or "‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶¨‡¶ü" in message:
            return JsonResponse({'response': "‡¶Ü‡¶Æ‡¶ø '‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶¨‡¶ü' ‚Äî ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶¨‡¶ø‡¶∑‡ßü‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶®‡¶æ‡¶®‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø!"})

        # ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        def extract_movie_name(msg):
            if "'" in msg:
                start = msg.index("'") + 1
                end = msg.index("'", start)
                return msg[start:end]
            if "‡¶è‡¶∞" in msg:
                return msg.split("‡¶è‡¶∞")[0].strip()
            if "‡¶ï‡¶§" in msg:
                return msg.split("‡¶ï‡¶§")[0].strip()
            return " ".join(msg.split()[:2])  # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶¶‡ßÅ‡¶ü‡ßã ‡¶∂‡¶¨‡ßç‡¶¶

        movie_name = extract_movie_name(message)
        search_url = f"https://api.themoviedb.org/3/search/movie?api_key={api_key}&query={movie_name}"

        try:
            # ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Æ‡ßÅ‡¶≠‡¶ø
            if any(word in message for word in ["‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º", "‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡ßü", "popular"]):
                url = f"https://api.themoviedb.org/3/movie/popular?api_key={api_key}&page=1"
                response = requests.get(url)
                response.raise_for_status()
                movies = response.json()['results'][:3]
                movie_list = ", ".join([movie['title'] for movie in movies])
                return JsonResponse({'response': f"‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Æ‡ßÅ‡¶≠‡¶ø: {movie_list}"})
            
            # 2023-‡¶è‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø
            elif any(year in message for year in ["2023", "‡ß®‡ß¶‡ß®‡ß©"]) and any(action in message for action in ["‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®", "‡¶è‡¶ï‡¶∂‡¶®", "action"]):
                url = f"https://api.themoviedb.org/3/discover/movie?api_key={api_key}&primary_release_year=2023&with_genres=28&sort_by=popularity.desc"
                response = requests.get(url)
                response.raise_for_status()
                movies = response.json()['results'][:3]
                movie_list = ", ".join([movie['title'] for movie in movies])
                return JsonResponse({'response': f"2023-‡¶è‡¶∞ ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø: {movie_list}"})
            
            # ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç
            elif "‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç" in message or "rating" in message:
                response = requests.get(search_url)
                response.raise_for_status()
                data = response.json()
                if data.get('results'):
                    movie = data['results'][0]
                    return JsonResponse({'response': f"'{movie['title']}'-‡¶è‡¶∞ ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç: {movie['vote_average']}"} )
            
            # ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü
            elif "‡¶ï‡¶æ‡¶∏‡ßç‡¶ü" in message or "cast" in message:
                response = requests.get(search_url)
                response.raise_for_status()
                data = response.json()
                if data.get('results'):
                    movie_id = data['results'][0]['id']
                    url = f"https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key={api_key}"
                    cast_response = requests.get(url)
                    cast_data = cast_response.json()
                    cast = [actor['name'] for actor in cast_data['cast'][:3]]
                    return JsonResponse({'response': f"'{movie_name}'-‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü: {', '.join(cast)}"})
            
            # ‡¶ú‡ßá‡¶®‡¶æ‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶Æ‡ßÅ‡¶≠‡¶ø
            elif any(genre in message for genre in ["‡¶ï‡¶Æ‡ßá‡¶°‡¶ø", "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®", "‡¶π‡¶∞‡¶∞"]):
                genre_map = {"‡¶ï‡¶Æ‡ßá‡¶°‡¶ø": 35, "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®": 28, "‡¶π‡¶∞‡¶∞": 27}
                genre_id = next((gid for g, gid in genre_map.items() if g in message), None)
                if genre_id:
                    url = f"https://api.themoviedb.org/3/discover/movie?api_key={api_key}&with_genres={genre_id}&sort_by=popularity.desc"
                    response = requests.get(url)
                    response.raise_for_status()
                    movies = response.json()['results'][:3]
                    movie_list = ", ".join([movie['title'] for movie in movies])
                    genre_name = next(g for g in genre_map if g in message)
                    return JsonResponse({'response': f"‡¶ï‡¶ø‡¶õ‡ßÅ {genre_name} ‡¶Æ‡ßÅ‡¶≠‡¶ø: {movie_list}"})
            
            # ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â
            elif "‡¶∞‡¶ø‡¶≠‡¶ø‡¶â" in message or "review" in message:
                response = requests.get(search_url)
                response.raise_for_status()
                data = response.json()
                if data.get('results'):
                    movie_data = data['results'][0]
                    movie_id = movie_data['id']
                    try:
                        movie = Movie.objects.get(id=movie_id)  # TMDb ID ‡¶¶‡¶ø‡ßü‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö
                        reviews = movie.reviews.all()[:3]
                        if reviews:
                            review_list = "\n".join([f"{r.user.username}: {r.comment} (‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç: {r.rating})" for r in reviews])
                            return JsonResponse({'response': f"'{movie_data['title']}'-‡¶è‡¶∞ ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â:\n{review_list}"})
                        else:
                            return JsonResponse({'response': f"'{movie_data['title']}'-‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶®‡ßá‡¶á‡•§ TMDb ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂: {movie_data['overview']}"} )
                    except Movie.DoesNotExist:
                        return JsonResponse({'response': f"'{movie_data['title']}'-‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶®‡ßá‡¶á‡•§ TMDb ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂: {movie_data['overview']}"} )

            return JsonResponse({'response': "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶ü‡¶æ ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶≤‡ßá‡¶ñ‡ßã!"})

        except requests.exceptions.RequestException as e:
            return JsonResponse({'response': "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"})

    return render(request, 'movie_app/chatbot.html')



def some_view(request):
    movies = Movie.objects.all().order_by('id')  # ‡¶Ö‡¶•‡¶¨‡¶æ 'title', 'release_date' ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
    paginator = Paginator(movies, 8)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return render(request, 'template.html', {'page_obj': page_obj})